name: cicd

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install yq
        run: sudo snap install yq
      - name: Build images
        run: make docker
      - name: Save images
        run: |
          mkdir images
          docker save $(yq e '.deployment.image' helm/values.yaml) -o images/${GITHUB_SHA}_image.tar
      - uses: actions/upload-artifact@v2
        with:
          name: images
          path: images
          retention-days: 1

  black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install black
        run: |
          pip3 install setuptools wheel
          pip3 install black
      - name: Verify formatting
        run: |
          python3 -m black . 2>&1 | grep -q "reformatted" && { echo 'Not properly formatted.'; exit 1; } || true

  kube-linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Scan repo
        id: kube-lint-repo
        uses: stackrox/kube-linter-action@v1.0.2
        with:
          directory: helm
          config: .kube-linter/config.yaml

  hadolint:
    runs-on: ubuntu-latest
    container:
      image: hadolint/hadolint:latest-debian
    steps:
      - uses: actions/checkout@v2
      - name: Lint
        run: hadolint docker/Dockerfile

  pylint:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    steps:
      - uses: actions/checkout@v2
      - name: Install packages
        # Since we run inside an alpine based container, we cannot compile yarl and multidic
        run: YARL_NO_EXTENSIONS=1 MULTIDICT_NO_EXTENSIONS=1 pip3 install -r requirements_dev.txt
      - name: Lint
        run: pylint --ignore-patterns=tests,coverage connaisseur

  pytest:
    runs-on: ubuntu-latest
    container:
      image: python:slim
    steps:
      - uses: actions/checkout@v2
      - name: Install packages
        run: pip3 install -r requirements_dev.txt && pip3 install .
      - name: Install git and curl
        run: apt update && apt install -y git curl
      - name: Test
        run: pytest --cov=connaisseur --cov-report=xml tests/
      - name: Upload code coverage
        uses: codecov/codecov-action@v2.0.3
        with:
          file: coverage.xml
          fail_ci_if_error: true

  bandit:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    steps:
      - uses: actions/checkout@v2
      - name: Install bandit
        run: pip3 install bandit
      - name: Run bandit
        run: bandit -r -f txt -o bandit-report.txt connaisseur/
      - name: Print report
        if: ${{ success() || failure() }}
        run: cat bandit-report.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: bandit-report
          path: bandit-report.txt

  safety:
    runs-on: ubuntu-latest
    container:
      image: python:alpine
    env:
      YARL_NO_EXTENSIONS: 1
      MULTIDICT_NO_EXTENSIONS: 1
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/safety
      - name: Print report
        if: ${{ success() || failure() }}
        run: cat safety-report.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: safety-report
          path: safety-report.txt

  trivy-config-scanner:
    name: trivy config scan
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Render Helm charts
        run: |
          mkdir deployment
          helm template helm > deployment/deployment.yaml
      - name: Run Trivy on deployment.yaml
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'deployment'
          hide-progress: false
          format: 'table'
          exit-code: '1'
          ignore-unfixed: false
          severity: 'CRITICAL,HIGH'
      - name: Run Trivy on Dockerfiles
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'docker'
          hide-progress: false
          format: 'table'
          exit-code: '1'
          ignore-unfixed: false
          severity: 'CRITICAL,HIGH'

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: build
        run: |
          pip install -r docs/requirements_docs.txt
          mkdocs build

  trivy-vuln-scan:
    name: trivy vuln scan
    runs-on: ubuntu-latest
    container:
      image: docker:stable
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: images
      - uses: ./.github/actions/trivy
      - name: Print reports
        if: ${{ success() || failure() }}
        run: |
          cat trivy-reports/image.txt
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
           name: trivy-reports
           path: trivy-reports

  integration-test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        integration-test-script: [
          'integration-test.sh',
          'preconfig-integration-test.sh',
          'cosign-integration-test.sh',
          'deployment-integration-test.sh'
        ]
    services:
      alerting-endpoint:
        image: securesystemsengineering/alerting-endpoint
        ports:
          - 56243:56243
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: images
      - name: Load Docker images
        run: |
          docker load -i ${GITHUB_SHA}_image.tar
        shell: bash
      - uses: ./.github/actions/integration-test
        with:
          integration-test-script: ${{ matrix.integration-test-script }}

  upgrade-test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Install yq and bash
        run: |
          sudo snap install yq
          sudo apt update
          sudo apt install bash -y
        shell: bash
      - uses: actions/download-artifact@v2
        with:
          name: images
      - name: Load Docker images
        run: |
          docker load -i ${GITHUB_SHA}_image.tar
        shell: bash
      - name: Create KinD cluster
        run: |
          GO111MODULE="on" go get sigs.k8s.io/kind
          kind create cluster --wait 120s
        shell: bash
      - name: Check KinD cluster
        run: kubectl get nodes
        shell: bash
      - uses: actions/checkout@v2
        with:
          ref: 'master'
      - name: Configure Connaisseur (master)
        run: |
          yq e '.detectionMode = "true"' -i helm/values.yaml
      - name: Install Connaisseur (master)
        run: |
          make install
      - name: Get image name & version
        run: |
          kubectl get pods -n connaisseur -o jsonpath="{.items[*].spec.containers[*].image}"
      - name: Test denial of unsigned nv1 image
        run: |
          kubectl run pod --image=securesystemsengineering/testimage:unsigned >output.log 2>&1 || true
          if [[ ! "$(cat output.log)" =~ 'Unable to find signed digest for image docker.io/securesystemsengineering/testimage:unsigned.' ]]; then
            echo 'Failed to deny unsigned image or failed with unexpected error. Output:'
            cat output.log
            exit 1
          else
            echo 'Successfully denied usage of unsigned image'
          fi
      - name: Migration step before Upgrade fix
        run: |
          CONNAISSEUR_IMAGE=$(yq e '.deployment.image' helm/values.yaml)
          if [[ ${CONNAISSEUR_IMAGE} == "securesystemsengineering/connaisseur:v2.1.2" ]]; then
            make uninstall
          fi
      - uses: actions/checkout@v2
      - name: Add images to KinD
        run: |
          kind load docker-image $(yq e '.deployment.image' helm/values.yaml)
        shell: bash
      - name: Configure Connaisseur (branch)
        run: |
          yq e '.deployment.imagePullPolicy = "IfNotPresent"' -i helm/values.yaml
      - name: Upgrade Connaisseur to current branch
        run: |
          if [[ ${CONNAISSEUR_IMAGE} == "securesystemsengineering/connaisseur:v2.1.2" ]]; then
            make install
          else
            make upgrade
          fi
      - name: Get image name & version
        run: |
          kubectl get pods -n connaisseur -o jsonpath="{.items[*].spec.containers[*].image}"
      - name: Test denial of unsigned nv1 image
        run: |
          kubectl run pod --image=securesystemsengineering/testimage:unsigned >output.log 2>&1 || true
          if [[ ! "$(cat output.log)" =~ 'Unable to find signed digest for image docker.io/securesystemsengineering/testimage:unsigned.' ]]; then
            echo 'Failed to deny unsigned image or failed with unexpected error. Output:'
            cat output.log
            exit 1
          else
            echo 'Successfully denied usage of unsigned image'
          fi
      - name: Uninstall Connaisseur
        run: |
          make uninstall

